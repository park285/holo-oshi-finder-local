# Holo-Oshi-Finder 인프라 전용 (Local Development)
# 애플리케이션 서비스는 호스트에서 직접 개발, 인프라만 Docker로 관리

version: '3.8'

services:
  
  # ===========================================
  # 데이터베이스
  # ===========================================
  
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: holo-postgres
    environment:
      POSTGRES_USER: holo_user
      POSTGRES_PASSWORD: holo_password
      POSTGRES_DB: holo_oshi_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U holo_user -d holo_oshi_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================
  # 캐시 및 메시지큐
  # ===========================================

  redis:
    image: redis:7-alpine
    container_name: holo-redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    command: |
      redis-server 
      --appendonly yes 
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1 60 100 30 10000
      --tcp-keepalive 300
      --timeout 0
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: holo-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
      - "15692:15692" # Prometheus metrics
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit_secret
      RABBITMQ_PLUGINS: rabbitmq_management,rabbitmq_prometheus
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # ===========================================
  # 관리 및 모니터링 도구
  # ===========================================

  # PostgreSQL 관리 UI
  adminer:
    image: adminer
    container_name: holo-adminer
    ports:
      - "8091:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    restart: unless-stopped

  # Docker 관리 UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: holo-portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # ===========================================
  # API Gateway (로컬 개발용)
  # ===========================================

  caddy:
    image: caddy:2-alpine
    container_name: holo-caddy-gateway
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS (자동 SSL)
    volumes:
      - ./caddy/Caddyfile.local:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    extra_hosts:
      # 호스트에서 실행되는 서비스들에 접근
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: |
      sh -c "
      # 호스트 서비스 대기
      sleep 10
      caddy run --config /etc/caddy/Caddyfile --watch
      "

# ===========================================
# 볼륨 정의
# ===========================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  caddy-data:
    driver: local
  caddy-config:
    driver: local
  portainer-data:
    driver: local

# ===========================================
# 네트워크 정의
# ===========================================
networks:
  default:
    driver: bridge
    name: holo-network