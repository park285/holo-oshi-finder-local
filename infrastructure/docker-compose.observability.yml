networks:
  monitoring:
    driver: bridge
  default:
    external: false

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  jaeger-data:
    driver: local
  alertmanager-data:
    driver: local

services:

 
  prometheus:
    image: prom/prometheus:latest
    container_name: holo-prometheus
    restart: unless-stopped
    ports:
      - "59090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'  # 30일 보관
      - '--storage.tsdb.retention.size=10GB'  # 최대 10GB
      - '--web.enable-lifecycle'  # Hot reload 지원
      - '--web.enable-admin-api'   # Admin API 활성화
      - '--query.max-concurrency=50'  # 성능 최적화
    networks:
      - monitoring
      - default
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Grafana - 시각화 대시보드 
  grafana:
    image: grafana/grafana:latest
    container_name: holo-grafana
    restart: unless-stopped
    ports:
      - "53000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      # 보안 설정
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_2025
      - GF_SECURITY_SECRET_KEY=holo_grafana_secret_key_2025_secure
      
      # 성능 최적화
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_ENABLE_GZIP=true
      
      # 데이터소스 자동 설정
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      
      # 알림 설정
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      
      # 로깅
      - GF_LOG_LEVEL=info
      - GF_LOG_MODE=console,file
    networks:
      - monitoring
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  #  Loki 
  loki:
    image: grafana/loki:latest
    container_name: holo-loki
    restart: unless-stopped
    ports:
      - "53100:3100"
    volumes:
      - loki-data:/loki
      - ./monitoring/loki:/etc/loki
    command:
      - '-config.file=/etc/loki/local-config.yaml'
      - '-target=all'
      - '-server.http-listen-port=3100'
      - '-common.path-prefix=/loki'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Promtail - 로그 수집 에이전트
  promtail:
    image: grafana/promtail:latest
    container_name: holo-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./services:/app/services:ro  # MSA 서비스 로그
    command:
      - '-config.file=/etc/promtail/config.yml'
      - '-server.http-listen-port=9080'
    networks:
      - monitoring
    depends_on:
      - loki
    ports:
      - "59080:9080"

  # Zipkin - 분산 추적 시스템 (Netflix/Google 수준 안정성)
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: holo-zipkin
    restart: unless-stopped
    ports:
      - "59411:9411"  # Zipkin UI + API
    environment:
      - STORAGE_TYPE=mem
      - MEM_MAX_SPANS=100000
      - JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  #AlertManager - 알림 시스템
  alertmanager:
    image: prom/alertmanager:latest
    container_name: holo-alertmanager
    restart: unless-stopped
    ports:
      - "59093:9093"
    volumes:
      - alertmanager-data:/alertmanager
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  #  Node Exporter - 시스템 메트릭 수집
  node-exporter:
    image: prom/node-exporter:latest
    container_name: holo-node-exporter
    restart: unless-stopped
    ports:
      - "59100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  #  cAdvisor - 컨테이너 메트릭 수집
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: holo-cadvisor
    restart: unless-stopped
    ports:
      - "58080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'